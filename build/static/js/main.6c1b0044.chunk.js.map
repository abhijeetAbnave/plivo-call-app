{"version":3,"sources":["Components/CallPage.js","Components/CreateCall.js","Services/api.js","App.js","reportWebVitals.js","index.js"],"names":["CallPage","userDetails","refreshSession","useState","time","counter","setCounter","useEffect","setTimeoutId","setTimeout","clearTimeout","username","to","Option","Select","FormPage","setUserDetails","makeCall","countryCodeFrom","setCountryCodeFrom","countryCodeTo","setCountryCodeTo","setTime","prefixSelectorFrom","Item","name","noStyle","defaultValue","style","width","onChange","value","prefixSelectorTo","labelCol","span","wrapperCol","initialValues","remember","onFinish","values","phoneNumberTo","from","phoneNumberFrom","onFinishFailed","errorInfo","console","log","label","rules","required","message","addonBefore","offset","type","htmlType","api","axios","Axios","create","defaults","baseURL","config","apiEndPoint","headers","common","timeout","interceptors","request","use","conf","error","Promise","reject","response","data","createAxios","service","postApi","route","payload","options","post","require","App","defaultData","showCreateCall","setCreateCall","a","then","catch","className","CreateCall","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mWA4BeA,MA1Bf,YAAoD,IAAhCC,EAA+B,EAA/BA,YAAaC,EAAkB,EAAlBA,eAC/B,EAA8BC,mBAASF,EAAYG,MAAnD,mBAAOC,EAAP,KAAgBC,EAAhB,KAiBA,OAfAC,qBAAU,WACR,IAAIC,EAAe,KASnB,OARgB,IAAZH,GACFH,IAEEG,EAAU,IACZG,EAAeC,YAAW,WACxBH,EAAWD,EAAU,KACpB,MAEE,WACAG,GAAcE,aAAaF,MAEjC,CAACH,IAGF,eAAC,WAAD,iBACMJ,EAAYU,SADlB,6BACsDV,EAAYW,GADlE,4BAEsBP,EAFtB,e,4CCnBIQ,EAAWC,IAAXD,OAqLOE,EAnLE,SAAC,GAA+C,IAA7Cd,EAA4C,EAA5CA,YAAae,EAA+B,EAA/BA,eAAgBC,EAAe,EAAfA,SAE/C,EAA8Cd,mBAASF,EAAYiB,iBAAnE,mBAAOA,EAAP,KAAwBC,EAAxB,KACA,EAA0ChB,mBAASF,EAAYmB,eAA/D,mBAAOA,EAAP,KAAsBC,EAAtB,KACA,EAAwBlB,mBAASF,EAAYG,MAA7C,mBAAOA,EAAP,KAAakB,EAAb,KAwDMC,EACJ,cAAC,IAAKC,KAAN,CAAWC,KAAK,kBAAkBC,SAAO,EAAzC,SACE,eAAC,IAAD,CAAQC,aAAcT,EAAiBU,MAAO,CAAEC,MAAO,IAAMC,SA7BnC,SAACC,GAC7Bf,EAAe,2BACVf,GADS,IAEZiB,gBAAiBa,KAEnBZ,EAAmBY,IAwBjB,UACE,cAAClB,EAAD,CAAQkB,MAAM,MAAd,iBACA,cAAClB,EAAD,CAAQkB,MAAM,MAAd,sBAKAC,EACJ,cAAC,IAAKR,KAAN,CAAWC,KAAK,gBAAgBC,SAAO,EAAvC,SACE,eAAC,IAAD,CAAQC,aAAcP,EAAeQ,MAAO,CAAEC,MAAO,IAAMC,SA7BpC,SAACC,GAC1Bf,EAAe,2BACVf,GADS,IAEZmB,cAAeW,KAEjBV,EAAiBU,IAwBf,UACE,cAAClB,EAAD,CAAQkB,MAAM,MAAd,iBACA,cAAClB,EAAD,CAAQkB,MAAM,MAAd,sBAMN,OAoCE,cAnCA,CAmCC,IAAD,2BA7Ga,CACbE,SAAU,CAAEC,KAAM,IAClBC,WAAY,CAAED,KAAM,OA2GpB,IAEET,KAAK,QACLW,cAAe,CACbC,UAAU,GAEZC,SA1Ga,SAACC,GAChBA,EAAOrB,gBAAkBA,EACzBqB,EAAOnB,cAAgBA,EACvBmB,EAAOnC,KAAOA,EACdmC,EAAO3B,GAAKQ,EAAgBmB,EAAOC,cACnCD,EAAOE,KAAOvB,GAAmBqB,EAAOG,gBAAkBH,EAAOG,gBAAkBzC,EAAYwC,MAC/FF,EAAOd,KAAOc,EAAOd,KACrBT,EAAe,2BACVf,GACAsC,IAELtB,EAASsB,IAgGPI,eA7FmB,SAACC,GACtBC,QAAQC,IAAI,UAAWF,IAqFvB,UASE,cAAC,IAAKpB,KAAN,CACEuB,MAAM,OACNtB,KAAK,OACLuB,MAAO,CACL,CACEC,UAAU,EACVC,QAAS,4BANf,SAUE,cAAC,IAAD,MAGF,cAAC,IAAK1B,KAAN,CACEuB,MAAM,0BACNtB,KAAK,kBAELuB,MAAO,CACL,CACEE,QAAS,oCANf,SAUE,cAAC,IAAD,CAAOC,YAAa5B,MAEtB,cAAC,IAAKC,KAAN,CACEuB,MAAM,uBACNtB,KAAK,gBAELuB,MAAO,CACL,CACEC,UAAU,EACVC,QAAS,uCAPf,SAWE,cAAC,IAAD,CAAOC,YAAanB,MAEtB,cAAC,IAAKR,KAAN,CAAWuB,MAAM,mBAAmBtB,KAAK,OAAzC,SACA,eAAC,IAAD,CAAQE,aAAcvB,EAAMwB,MAAO,CAAEC,MAAO,KAAOC,SAhHrC,SAACC,GACjBf,EAAe,2BACVf,GADS,IAEZG,KAAM2B,KAERT,EAAQS,IA2GN,UACE,cAAClB,EAAD,CAAQkB,MAAO,GAAf,oBACA,cAAClB,EAAD,CAAQkB,MAAO,IAAf,mBACA,cAAClB,EAAD,CAAQkB,MAAO,IAAf,oBACA,cAAClB,EAAD,CAAQkB,MAAO,IAAf,yBAGF,cAAC,IAAKP,KAAN,2BA/Je,CACjBW,WAAY,CAAEiB,OAAQ,EAAGlB,KAAM,MA8J7B,aACE,cAAC,IAAD,CAAQmB,KAAK,UAAUC,SAAS,SAAhC,4B,0BCtJR,IAAMC,EAtBN,WACE,IAAMC,EAAQC,IAAMC,SAkBpB,OAjBAF,EAAMG,SAASC,QAAf,UAA4BC,EAAOC,YAAnC,KACAN,EAAMG,SAASI,QAAQC,OAAO,gBAAkB,mBAChDR,EAAMG,SAASM,QAAU,KACzBT,EAAMU,aAAaC,QAAQC,KACzB,SAACC,GACC,OAAOA,KAET,SAACC,GAAD,OAAWC,QAAQC,OAAOF,MAG5Bd,EAAMU,aAAaO,SAASL,KAC1B,SAACK,GAAD,cAAcA,QAAd,IAAcA,OAAd,EAAcA,EAAUC,QACxB,SAACJ,GAAW,IAAD,EACT,cAAIA,QAAJ,IAAIA,GAAJ,UAAIA,EAAOG,gBAAX,aAAI,EAAiBC,MAAaH,QAAQC,OAAOF,EAAMG,SAASC,MACzDH,QAAQC,OAAOF,MAGnBd,EAGGmB,GAQGC,EANC,CACZC,QADY,SACJC,GAAoC,IAA7BC,EAA4B,uDAAlB,GAAIC,EAAc,uDAAJ,GACnC,OAAOzB,EAAI0B,KAAKH,EAAOC,EAASC,KCvB1BE,EAAQ,IA0DPC,MAvDf,WAEE,IAAMC,EAAc,CAClB3D,KAAM,GACNP,gBAAiB,MACjBE,cAAe,MACfqB,KAAM,gBACN7B,GAAI,GACJR,KAAM,IAIR,EAAsCD,mBAASiF,GAA/C,mBAAOnF,EAAP,KAAoBe,EAApB,KAEA,EAAwCb,oBAAS,GAAjD,mBAAOkF,EAAP,KAAuBC,EAAvB,KAOMrE,EAAQ,uCAAG,WAAOyD,GAAP,SAAAa,EAAA,sDACfX,EAAQC,QAAQ,kBAAmBH,GAChCc,MAAK,SAACf,GACL5B,QAAQC,IAAI2B,GACZa,GAAc,MAEfG,OAAM,SAACnB,GACNzB,QAAQC,IAAIwB,MAPD,2CAAH,sDAed,OAJA/D,qBAAU,cAEP,CAACN,IAGF,qBAAKyF,UAAU,MAAf,SACE,wBAAQA,UAAU,aAAlB,SACF,qBAAKA,UAAU,YAAf,SACGL,EACC,cAACM,EAAD,CACE1F,YAAaA,EACbe,eAAgBA,EAChBC,SAAUA,IAGZ,cAAC,EAAD,CAAUhB,YAAaA,EAAaC,eA/BnB,WACrBoF,GAAc,GACdtE,EAAeoE,aCfJQ,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBN,MAAK,YAAkD,IAA/CO,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCAdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.6c1b0044.chunk.js","sourcesContent":["import React, { useEffect, useState, Fragment } from \"react\";\r\n\r\nfunction CallPage({ userDetails, refreshSession }) {\r\n  const [counter, setCounter] = useState(userDetails.time);\r\n\r\n  useEffect(() => {\r\n    let setTimeoutId = null;\r\n    if (counter === 0) {\r\n      refreshSession();\r\n    }\r\n    if (counter > 0) {\r\n      setTimeoutId = setTimeout(() => {\r\n        setCounter(counter - 1);\r\n      }, 1000);\r\n    }\r\n    return () => {\r\n      if (!setTimeoutId) clearTimeout(setTimeoutId);\r\n    };\r\n  }, [counter]);\r\n\r\n  return (\r\n    <Fragment>\r\n      Hi {userDetails.username}, You are now speaking to {userDetails.to} This\r\n      Call will End in : {counter} Seconds\r\n    </Fragment>\r\n  );\r\n}\r\n\r\nexport default CallPage;\r\n","import React, { Fragment, useState } from \"react\";\r\nimport { Form, Input, Button, Checkbox, Select } from 'antd';\r\nconst { Option } = Select;\r\n\r\nconst FormPage = ({ userDetails, setUserDetails, makeCall }) => {\r\n\r\n  const [countryCodeFrom, setCountryCodeFrom] = useState(userDetails.countryCodeFrom);\r\n  const [countryCodeTo, setCountryCodeTo] = useState(userDetails.countryCodeTo);\r\n  const [time, setTime] = useState(userDetails.time);\r\n\r\n  const layout = {\r\n    labelCol: { span: 14 },\r\n    wrapperCol: { span: 100 },\r\n  };\r\n  \r\n  const tailLayout = {\r\n    wrapperCol: { offset: 8, span: 16 },\r\n  };\r\n\r\n  const onFinish = (values) => {\r\n    values.countryCodeFrom = countryCodeFrom;\r\n    values.countryCodeTo = countryCodeTo;\r\n    values.time = time;\r\n    values.to = countryCodeTo + values.phoneNumberTo;\r\n    values.from = countryCodeFrom + (values.phoneNumberFrom ? values.phoneNumberFrom : userDetails.from);\r\n    values.name = values.name;\r\n    setUserDetails({\r\n      ...userDetails,\r\n      ...values\r\n    })\r\n    makeCall(values);\r\n  };\r\n\r\n  const onFinishFailed = (errorInfo) => {\r\n    console.log('Failed:', errorInfo);\r\n  };\r\n\r\n  const handleCountryCodeFrom = (value) => {\r\n    setUserDetails({\r\n      ...userDetails,\r\n      countryCodeFrom: value\r\n    })\r\n    setCountryCodeFrom(value);\r\n    return;\r\n  }\r\n\r\n  const handleCountryCodeTo= (value) => {\r\n    setUserDetails({\r\n      ...userDetails,\r\n      countryCodeTo: value\r\n    })\r\n    setCountryCodeTo(value);\r\n    return;\r\n  }\r\n\r\n  const handleTime= (value) => {\r\n    setUserDetails({\r\n      ...userDetails,\r\n      time: value\r\n    })\r\n    setTime(value);\r\n    return;\r\n  }  \r\n\r\n  const prefixSelectorFrom = (\r\n    <Form.Item name=\"countryCodeFrom\" noStyle>\r\n      <Select defaultValue={countryCodeFrom} style={{ width: 67 }} onChange={handleCountryCodeFrom}>\r\n        <Option value=\"+91\">+91</Option>\r\n        <Option value=\"+87\">+87</Option>\r\n      </Select>\r\n    </Form.Item>\r\n  );\r\n\r\n  const prefixSelectorTo = (\r\n    <Form.Item name=\"countryCodeTo\" noStyle>\r\n      <Select defaultValue={countryCodeTo} style={{ width: 67 }} onChange={handleCountryCodeTo}>\r\n        <Option value=\"+91\">+91</Option>\r\n        <Option value=\"+87\">+87</Option>\r\n      </Select>\r\n    </Form.Item>\r\n  );\r\n\r\n\r\n  return (\r\n    //   <Fragment>\r\n    // {/* <MDBContainer>\r\n    //   <br/> <br/> <br/> <br/>\r\n    //   <MDBRow>\r\n    //     <MDBCol md=\"6\"> */}\r\n    //       <form onSubmit={handleSubmit}>\r\n    //         <p className=\"h4 text-center mb-4\">Enter Details of the call</p>\r\n    //         <label htmlFor=\"defaultFormRegisterNameEx\" className=\"grey-text\">\r\n    //           Your name\r\n    //         </label>\r\n    //         <input type=\"text\" name=\"username\" className=\"form-control\" value={userDetails.username} onChange={handleChange} />\r\n    //         <br />\r\n    //         <label htmlFor=\"defaultFormRegisterEmailEx\" className=\"grey-text\">\r\n    //           Phone Number to call:\r\n    //         </label>\r\n    //         <input type=\"text\" name=\"to\" className=\"form-control\" value={userDetails.to} onChange={handleChange} />\r\n    //         <br />\r\n    //         <label htmlFor=\"defaultFormRegisterEmailEx\" className=\"grey-text\">\r\n    //           Duration of call:\r\n    //         </label>\r\n    //         <select name=\"time\" value={userDetails.time} onChange={handleChange}>\r\n    //           <option value={10}>5 Minutes</option>\r\n    //           <option value={600}>10 Minutes</option>\r\n    //           <option value={900}>15 Minutes</option>\r\n    //         </select>\r\n    //         <div className=\"text-center mt-4\">\r\n    //           <button color=\"unique\" type=\"submit\">\r\n    //             Make a call\r\n    //           </button>\r\n    //         </div>\r\n    //       </form>\r\n    //     {/* </MDBCol>\r\n    //   </MDBRow>\r\n    // </MDBContainer> */}\r\n    // </Fragment>\r\n    <Form\r\n      {...layout}\r\n      name=\"basic\"\r\n      initialValues={{\r\n        remember: true,\r\n      }}\r\n      onFinish={onFinish}\r\n      onFinishFailed={onFinishFailed}\r\n    >\r\n      <Form.Item\r\n        label=\"Name\"\r\n        name=\"name\"\r\n        rules={[\r\n          {\r\n            required: true,\r\n            message: 'Please input your name!',\r\n          },\r\n        ]}\r\n      >\r\n        <Input />\r\n      </Form.Item>\r\n\r\n      <Form.Item\r\n        label=\"Your Plivo Phone Number\"\r\n        name=\"phoneNumberFrom\"\r\n        \r\n        rules={[\r\n          {\r\n            message: 'Please input your phone number!',\r\n          },\r\n        ]}\r\n      >\r\n        <Input addonBefore={prefixSelectorFrom} />\r\n      </Form.Item>\r\n      <Form.Item\r\n        label=\"Phone Number to call\"\r\n        name=\"phoneNumberTo\"\r\n        \r\n        rules={[\r\n          {\r\n            required: true,\r\n            message: 'Please input phone number to call!',\r\n          },\r\n        ]}\r\n      >\r\n        <Input addonBefore={prefixSelectorTo} />\r\n      </Form.Item>\r\n      <Form.Item label=\"Select call time\" name=\"time\" >\r\n      <Select defaultValue={time} style={{ width: 100 }} onChange={handleTime}>\r\n        <Option value={30}>30 sec</Option>\r\n        <Option value={300}>5 min</Option>\r\n        <Option value={600}>10 min</Option>\r\n        <Option value={900}>15 min</Option>\r\n      </Select>\r\n    </Form.Item>\r\n      <Form.Item {...tailLayout}>\r\n        <Button type=\"primary\" htmlType=\"submit\">\r\n          Submit\r\n        </Button>\r\n      </Form.Item>\r\n    </Form>\r\n  );\r\n};\r\n\r\nexport default FormPage;","import Axios from \"axios\";\r\nimport config from \"../Constants/config.json\";\r\n\r\nfunction createAxios() {\r\n  const axios = Axios.create();\r\n  axios.defaults.baseURL = `${config.apiEndPoint}/`;\r\n  axios.defaults.headers.common[\"Content-Type\"] = \"application/json\";\r\n  axios.defaults.timeout = 120000; // 2*60*1000 = 120000 = 2 minutes\r\n  axios.interceptors.request.use(\r\n    (conf) => {\r\n      return conf;\r\n    },\r\n    (error) => Promise.reject(error)\r\n  );\r\n\r\n  axios.interceptors.response.use(\r\n    (response) => response?.data,\r\n    (error) => {\r\n      if (error?.response?.data) return Promise.reject(error.response.data);\r\n      return Promise.reject(error);\r\n    }\r\n  );\r\n  return axios;\r\n}\r\n\r\nconst api = createAxios();\r\n\r\nconst service = {\r\n    postApi(route, payload = {}, options = {}) {\r\n        return api.post(route, payload, options);\r\n    },\r\n}\r\n\r\nexport default service;","import \"./App.css\";\nimport { useEffect, useState } from \"react\";\nimport CallPage from \"./Components/CallPage\";\nimport CreateCall from \"./Components/CreateCall\";\nimport service from \"./Services/api\"\n\nconst axios = require(\"axios\");\n\n\nfunction App() {\n\n  const defaultData = {\n    name: \"\",\n    countryCodeFrom: \"+91\",\n    countryCodeTo: \"+91\",\n    from: \"+425334523435\", \n    to: \"\",\n    time: 30,\n  };\n\n  \n  const [userDetails, setUserDetails] = useState(defaultData);\n\n  const [showCreateCall, setCreateCall] = useState(true);\n\n  const refreshSession = () => {\n    setCreateCall(true);\n    setUserDetails(defaultData);\n  };\n\n  const makeCall = async (data) => {\n    service.postApi('/plivio/callAPI', data)\n      .then((response) => {\n        console.log(response);\n        setCreateCall(false);\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  };\n\n  useEffect(()=> {\n    debugger;\n  }, [userDetails])\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n    <div className=\"container\">\n      {showCreateCall ? (\n        <CreateCall\n          userDetails={userDetails}\n          setUserDetails={setUserDetails}\n          makeCall={makeCall}\n        />\n      ) : (\n        <CallPage userDetails={userDetails} refreshSession={refreshSession} />\n      )}\n    </div>\n     </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport '../node_modules/antd/dist/antd.css'\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}